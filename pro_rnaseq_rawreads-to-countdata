configfile: "config.yaml"

# Define paths from config
WORKDIR   = config["workdir"]
REFERENCE = config["reference"]
ANNOTATION = config["annotation"]
ADAPTERS  = config["adapters"]
SAMPLES   = config["samples"]
READ_COUNT = f"{WORKDIR}/{config['output']['counts']}"

rule all:
    input:
        READ_COUNT

# Quality-trimming, filtering and adapter-trimming of the raw Illumina reads
rule clean:
    input:
        rawfile1 = lambda wc: f"{WORKDIR}/{wc.sample}R1.fastq",
        rawfile2 = lambda wc: f"{WORKDIR}/{wc.sample}R2.fastq"
    output:
        clean1 = f"{WORKDIR}/cln{{sample}}R1.fastq",
        clean2 = f"{WORKDIR}/cln{{sample}}R2.fastq"
    params:
        adapters = ADAPTERS
    shell:
        "bbduk.sh in1={input.rawfile1} in2={input.rawfile2} "
        "out1={output.clean1} out2={output.clean2} ftl=9 minlength=75 "
        "ref={params.adapters} ktrim=r k=23 mink=11 hdist=1 tpe tbo"

# Indexing of the reference genome using bowtie
rule bowtie_build:
    input:
        REFERENCE
    output:
        touch("index.done")
    params:
        index_prefix = "genome"
    shell:
        "bowtie-build {input} {params.index_prefix}"

# Alignment of the reads
rule bowtie_align:
    input:
        idx = "index.done",
        fq1 = f"{WORKDIR}/cln{{sample}}R1.fastq",
        fq2 = f"{WORKDIR}/cln{{sample}}R2.fastq"
    output:
        sam = f"{WORKDIR}/cln{{sample}}.sam"
    params:
        index_prefix = "genome"
    shell:
        "bowtie -q {params.index_prefix} -1 {input.fq1} -2 {input.fq2} -S {output.sam}"

# SAM to BAM conversion
rule samtobam:
    input:
        f"{WORKDIR}/cln{{sample}}.sam"
    output:
        f"{WORKDIR}/cln{{sample}}.bam"
    shell:
        "samtools view -S -b {input} > {output}"

# Sorting BAM
rule sorting:
    input:
        f"{WORKDIR}/cln{{sample}}.bam"
    output:
        f"{WORKDIR}/cln{{sample}}sorted.bam"
    shell:
        "samtools sort {input} > {output}"

# FeatureCounts
rule featurecounts:
    input:
        an = ANNOTATION,
        sort = expand(f"{WORKDIR}/cln{{sample}}sorted.bam", sample=SAMPLES)
    output:
        READ_COUNT
    params:
        feature_type = config["featurecounts"]["feature_type"],
        attribute = config["featurecounts"]["attribute"],
        format = config["featurecounts"]["format"],
        paired = "-p" if config["featurecounts"]["paired"] else ""
    shell:
        "featureCounts {params.paired} -T 4 "
        "-t {params.feature_type} -g {params.attribute} -F {params.format} "
        "-a {input.an} {input.sort} -o {output}"
